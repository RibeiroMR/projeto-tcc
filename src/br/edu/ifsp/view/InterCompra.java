/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.edu.ifsp.view;

import br.edu.ifsp.connection.Conexao;
import br.edu.ifsp.control.CompraControle;
import br.edu.ifsp.control.FornecedorControle;
import br.edu.ifsp.control.ItemCompraControle;
import br.edu.ifsp.control.ProdutoControle;
import br.edu.ifsp.model.Compra;
import br.edu.ifsp.model.EntidadesCompra;
import br.edu.ifsp.model.EntidadesItemCompra;
import br.edu.ifsp.model.Fornecedor;
import br.edu.ifsp.model.ItemCompra;
import br.edu.ifsp.model.Produto;
import br.edu.ifsp.util.FormatRenderer;
import br.edu.ifsp.util.NumberRenderer;
import java.awt.Component;
import java.beans.PropertyVetoException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;

/**
 *
 * @author Murilo
 */
public class InterCompra extends javax.swing.JInternalFrame {

    Fornecedor fornecedor = new Fornecedor();
    ArrayList<Fornecedor> listaFornecedores = new ArrayList<>();
    FornecedorControle fornecedorControl = new FornecedorControle();

    ProdutoControle produtoControl = new ProdutoControle();
    Produto produto = new Produto();
    List<Produto> listaProdutos = new ArrayList<>();

    CompraControle compraControl = new CompraControle();
    Compra compra = new Compra();

    ItemCompraControle itemCompraControl = new ItemCompraControle();
    ItemCompra itemCompra = new ItemCompra();
    ArrayList<ItemCompra> listaItemCompra = new ArrayList<>();

    ArrayList<EntidadesCompra> listaEntidadesCompra = new ArrayList<>();

    ArrayList<EntidadesItemCompra> listaEntidadesItemCompra = new ArrayList<>();

    public InterCompra() {
        initComponents();

        tbpRegistroCompras.setEnabledAt(1, false);

        listarFornecedores();
        listarProdutos();

        listarCompras();

        if (!FrameInicial.lblUsuario.getText().equals("administrador")) {
            btnRelatorioCompras.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbpRegistroCompras = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCompras = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableItensCompra = new javax.swing.JTable();
        btnDarEntradaEstoque = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        dateMinVenda = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        dateMaxVenda = new com.toedter.calendar.JDateChooser();
        btnRelatorioCompras = new javax.swing.JButton();
        btnCancelarPedido = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        btnConsultaVendas = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProdutosCompra = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblTotalCompra = new javax.swing.JLabel();
        txtCodFornecedor = new javax.swing.JTextField();
        cboxFornecedor = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtBuscaFornecedor = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCodProduto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cboxProduto = new javax.swing.JComboBox<>();
        labelEstoque1 = new javax.swing.JLabel();
        labelEstoque = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtQtdProduto = new javax.swing.JTextField();
        btnAddProduto = new javax.swing.JButton();
        btnRemoveProduto = new javax.swing.JButton();
        btnFinalizar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Informaçãoes de Compra");

        tbpRegistroCompras.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Compra (s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 14))); // NOI18N

        tableCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Fornecedor", "Data do registro", "Total", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableComprasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableCompras);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de itens Solicictados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 14))); // NOI18N

        tableItensCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Quantidade", "Preço real", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableItensCompra);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        btnDarEntradaEstoque.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnDarEntradaEstoque.setForeground(new java.awt.Color(0, 153, 51));
        btnDarEntradaEstoque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/note (1).png"))); // NOI18N
        btnDarEntradaEstoque.setText("Confirmar entrada de Pedidos");
        btnDarEntradaEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarEntradaEstoqueActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jButton1.setText("+Novo Registro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel5.setText("Data Minima:");

        dateMinVenda.setDateFormatString("dd/MM/yyyy");
        dateMinVenda.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel6.setText("Data Máxima:");

        dateMaxVenda.setDateFormatString("dd/MM/yyyy");

        btnRelatorioCompras.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnRelatorioCompras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/printer.png"))); // NOI18N
        btnRelatorioCompras.setText("Gerar Relatório");
        btnRelatorioCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioComprasActionPerformed(evt);
            }
        });

        btnCancelarPedido.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnCancelarPedido.setForeground(new java.awt.Color(255, 0, 0));
        btnCancelarPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/cancelar.png"))); // NOI18N
        btnCancelarPedido.setText("Cancelar Pedido");
        btnCancelarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarPedidoActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel19.setText("Busca nome do cliente:");

        txtPesquisa.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/apagador.png"))); // NOI18N
        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnConsultaVendas.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnConsultaVendas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/pesquisar.png"))); // NOI18N
        btnConsultaVendas.setText("Consultar");
        btnConsultaVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaVendasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnDarEntradaEstoque)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelarPedido))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateMinVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateMaxVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnConsultaVendas)
                        .addGap(21, 21, 21)
                        .addComponent(btnRelatorioCompras)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnConsultaVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRelatorioCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5)
                    .addComponent(dateMaxVenda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateMinVenda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, Short.MAX_VALUE))
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDarEntradaEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        tbpRegistroCompras.addTab("Registros Salvos", jPanel2);

        tableProdutosCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Quantidade", "Preço", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableProdutosCompra);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel1.setText("Total:");

        lblTotalCompra.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        lblTotalCompra.setForeground(new java.awt.Color(0, 153, 0));
        lblTotalCompra.setText("R$ 0,00");

        txtCodFornecedor.setEditable(false);
        txtCodFornecedor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCodFornecedor.setEnabled(false);

        cboxFornecedor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cboxFornecedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboxFornecedor.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboxFornecedorPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel17.setText("Código:");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setText("Fornecedor:");

        jLabel18.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel18.setText("Procurar Nome:");

        txtBuscaFornecedor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtBuscaFornecedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscaFornecedorKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel11.setText("Código:");

        txtCodProduto.setEditable(false);
        txtCodProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCodProduto.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel3.setText("Produto:");

        cboxProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cboxProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Selecione um produto -" }));
        cboxProduto.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cboxProdutoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        labelEstoque1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelEstoque1.setText("Estoque:");

        labelEstoque.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        labelEstoque.setText("0,0");

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel9.setText("Quantidade:");

        txtQtdProduto.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQtdProduto.setText("1");

        btnAddProduto.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnAddProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/mais.png"))); // NOI18N
        btnAddProduto.setText("Adicionar");
        btnAddProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProdutoActionPerformed(evt);
            }
        });

        btnRemoveProduto.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnRemoveProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/menos.png"))); // NOI18N
        btnRemoveProduto.setText("Remover");
        btnRemoveProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProdutoActionPerformed(evt);
            }
        });

        btnFinalizar.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        btnFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/salve-.png"))); // NOI18N
        btnFinalizar.setText("Registrar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        btnVoltar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/back.png"))); // NOI18N
        btnVoltar.setText("Cancelar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboxFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(0, 270, Short.MAX_VALUE))
                            .addComponent(txtBuscaFornecedor)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboxProduto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(labelEstoque1)
                                .addGap(6, 6, 6)
                                .addComponent(labelEstoque)
                                .addGap(63, 63, 63))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtQtdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddProduto))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnRemoveProduto)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotalCompra))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(btnVoltar)
                                .addGap(52, 52, 52)
                                .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscaFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel3)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelEstoque)
                            .addComponent(labelEstoque1)
                            .addComponent(jLabel9))))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtQtdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnRemoveProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotalCompra))
                .addGap(18, 95, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tbpRegistroCompras.addTab("Novo Registro", jPanel4);

        jButton12.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/edu/ifsp/icons/cruz.png"))); // NOI18N
        jButton12.setText("Sair");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbpRegistroCompras)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton12)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tbpRegistroCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton12)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboxFornecedorPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboxFornecedorPopupMenuWillBecomeInvisible
        if (cboxFornecedor.isPopupVisible()) {
            if (cboxFornecedor.getSelectedIndex() != 0) {
                String a = cboxFornecedor.getSelectedItem().toString();
                String result[] = a.split(". ");

                Fornecedor f = fornecedorControl.buscarPorNome(result[0]);
                txtCodFornecedor.setText(String.valueOf(f.getCodigo()));
            } else {
                txtCodFornecedor.setText("");
            }
        }
    }//GEN-LAST:event_cboxFornecedorPopupMenuWillBecomeInvisible

    private void txtBuscaFornecedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscaFornecedorKeyReleased
        fornecedor = (Fornecedor) fornecedorControl.buscarPorNome(txtBuscaFornecedor.getText());
        cboxFornecedor.setSelectedItem(fornecedor.toString());
    }//GEN-LAST:event_txtBuscaFornecedorKeyReleased

    private void cboxProdutoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cboxProdutoPopupMenuWillBecomeInvisible
        if (cboxProduto.isPopupVisible()) {
            if (cboxProduto.getSelectedIndex() != 0) {
                String a = cboxProduto.getSelectedItem().toString();
                String result[] = a.split("; ");
                Produto p = produtoControl.buscarPorNome(result[0]);
                txtCodProduto.setText(String.valueOf(p.getCodigo()));

                String estoque = String.valueOf(p.getEstoque());
                String estoqueFormat = estoque.replace(" ", "").replace(".", ",");
                labelEstoque.setText(estoqueFormat);
            } else {
                txtCodProduto.setText("");
                labelEstoque.setText("0,0");
            }
        }
    }//GEN-LAST:event_cboxProdutoPopupMenuWillBecomeInvisible

    private void btnAddProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProdutoActionPerformed
        if (txtQtdProduto.getText().equals("") || cboxProduto.getSelectedIndex() == 0 || Integer.parseInt(txtQtdProduto.getText()) == 0) {
            JOptionPane.showMessageDialog(this, "Informe Produto e Quantia!", "Atenção", JOptionPane.WARNING_MESSAGE);
        } else {
            if (verificarQuantidadeEstoque()) {
                produto = produtoControl.buscarPorCodigo(txtCodProduto.getText());

                DefaultTableModel modelo = (DefaultTableModel) tableProdutosCompra.getModel();

                int cont = 0;
                for (int i = 0; i < cont; i++) {
                    modelo.setNumRows(0);
                }

                int tableTamanho = tableProdutosCompra.getRowCount();
                double quantidade = 0;
                quantidade = Double.parseDouble(txtQtdProduto.getText());

                System.out.println("Tamanho (ANTES) da Table Prod. Compra: " + tableProdutosCompra.getRowCount());

                if (tableProdutosCompra.getRowCount() == 0) {
                    addLinhaListaPCompra(modelo, quantidade);
                } else {
                    int i = 0;
                    boolean achou = false;
                    do {
                        if (String.valueOf(tableProdutosCompra.getValueAt(i, 0)).equals(txtCodProduto.getText())) {
                            tableProdutosCompra.setValueAt(quantidade + (double) tableProdutosCompra.getValueAt(i, 2), i, 2);
                            tableProdutosCompra.setValueAt((produto.getPrecoreal() * quantidade) + (double) tableProdutosCompra.getValueAt(i, 4), i, 4);

                            achou = true;
                        }
                        i++;
                    } while (i < tableTamanho && !achou);
                    if (achou == false) {
                        addLinhaListaPCompra(modelo, quantidade);
                    }
                }

                System.out.println("Tamanho (DEPOIS) da Table Prod. Compra: " + tableProdutosCompra.getRowCount());

                tableProdutosCompra.getColumnModel().getColumn(3).setCellRenderer(NumberRenderer.getCurrencyRenderer());
                tableProdutosCompra.getColumnModel().getColumn(4).setCellRenderer(NumberRenderer.getCurrencyRenderer());

                somarValorTotalProdutoServico();

                txtCodProduto.setText("");
                txtQtdProduto.setText("1");
                cboxProduto.setSelectedIndex(0);
                labelEstoque.setText("0,0");

                resizeColumnWidth(tableProdutosCompra);
            } else {
                JOptionPane.showMessageDialog(this, "A quantia informada não pode menor que 01 (UM)!", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddProdutoActionPerformed

    private void btnRemoveProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProdutoActionPerformed
        if (tableProdutosCompra.getSelectedRow() != -1) {
            subtrairValorProdutoServico(tableProdutosCompra.getSelectedRow());
            if (tableProdutosCompra.getRowCount() == 0) {
                lblTotalCompra.setText("R$ 0,00");
            }
        }
    }//GEN-LAST:event_btnRemoveProdutoActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        if (tableProdutosCompra.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Adicionar Produto a lista!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        } else if (txtCodFornecedor.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Selecione o Fornecedor da Compra", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        } else {
            String opt[] = {"Sim", "Não"};

            int op = JOptionPane.showOptionDialog(this, "Confirmar pedido de compra?", "Registrar Compra", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[1]);

            if (op == JOptionPane.YES_OPTION) {
                String valortotal = lblTotalCompra.getText().replace("R$", "").replace(" ", "").replace(",", ".");
                int codCompra = 0;

                compra = new Compra();

                compra.setCodFornecedor(Integer.parseInt(txtCodFornecedor.getText()));
                compra.setData(new Date(System.currentTimeMillis()));
                compra.setTotal(Double.parseDouble(valortotal));
                compra.setSituacao("Pendente");

                codCompra = compraControl.inserirCompra(compra);

                // adiciona os recursos a venda(Produto e/ou Serviço)
                adicionaritens(codCompra);

                DefaultTableModel modelo = (DefaultTableModel) tableProdutosCompra.getModel();
                modelo.setRowCount(0);
                lblTotalCompra.setText("R$ 0,00");

                cboxFornecedor.setSelectedIndex(0);
                cboxProduto.setSelectedIndex(0);

                listarCompras();

                tbpRegistroCompras.setEnabledAt(1, false);
                tbpRegistroCompras.setEnabledAt(0, true);
                tbpRegistroCompras.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void tableComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableComprasMouseClicked
        if (tableCompras.getSelectedRow() != -1) {
            listarProdutosCompra();
        }
    }//GEN-LAST:event_tableComprasMouseClicked

    private void btnDarEntradaEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarEntradaEstoqueActionPerformed
        if (tableCompras.getSelectedRow() != -1) {
            if (tableCompras.getValueAt(tableCompras.getSelectedRow(), 4).equals("Entregue")) {
                JOptionPane.showMessageDialog(this, "Esse pedido já foi confirmado a sua entrega!");
            } else if (tableCompras.getValueAt(tableCompras.getSelectedRow(), 4).equals("Cancelado")) {
                JOptionPane.showMessageDialog(this, "Esse pedido foi Cancelado!");
            } else {
                String opt[] = {"Sim", "Não"};

                int op = JOptionPane.showOptionDialog(this, "Confirmar entrada de Produtos do pedido de " + tableCompras.getValueAt(tableCompras.getSelectedRow(), 1) + "?",
                        "Confirmando pedidos da Compra nº " + tableCompras.getValueAt(tableCompras.getSelectedRow(), 0),
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[1]);

                if (op == JOptionPane.YES_OPTION) {
                    ArrayList<Produto> listaProdutoEstoque = new ArrayList<>();

                    for (int i = 0; i < tableItensCompra.getRowCount(); i++) {
                        produto = new Produto();

                        produto = produtoControl.buscarPorCodigo(String.valueOf(tableItensCompra.getValueAt(i, 0)));

                        produto.setEstoque(produto.getEstoque() + Double.parseDouble(String.valueOf(tableItensCompra.getValueAt(i, 2))));

                        listaProdutoEstoque.add(produto);
                    }

                    produtoControl.alterarEstoqueLista(listaProdutoEstoque);

                    compraControl.alterarSituacaoCompra(Integer.parseInt(String.valueOf(tableCompras.getValueAt(tableCompras.getSelectedRow(), 0))), "Entregue");

                    listarCompras();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma Compra da lista!");
        }
    }//GEN-LAST:event_btnDarEntradaEstoqueActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tbpRegistroCompras.setEnabledAt(1, true);
        tbpRegistroCompras.setEnabledAt(0, false);
        tbpRegistroCompras.setSelectedIndex(1);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        String opt[] = {"Sim", "Não"};

        int op = JOptionPane.showOptionDialog(this, "Fechar registros de compra?", "Fechar janela de compras", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[1]);

        if (op == JOptionPane.YES_OPTION) {
            try {
                this.setClosed(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(InterCompra.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        cboxFornecedor.setSelectedIndex(0);
        cboxProduto.setSelectedIndex(0);

        txtCodFornecedor.setText("");
        txtCodProduto.setText("");
        txtQtdProduto.setText("1");
        lblTotalCompra.setText("R$ 0,00");

        DefaultTableModel modelo = (DefaultTableModel) tableProdutosCompra.getModel();
        modelo.setRowCount(0);

        tbpRegistroCompras.setEnabledAt(1, false);
        tbpRegistroCompras.setEnabledAt(0, true);
        tbpRegistroCompras.setSelectedIndex(0);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnRelatorioComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioComprasActionPerformed
        if (dateMinVenda.getDate() == null || dateMaxVenda.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Um dos campos de inserção da data esta vazio!");
        } else if (dateMinVenda.getDate().compareTo(dateMaxVenda.getDate()) > 0) {
            JOptionPane.showMessageDialog(this, "A Data Máxima não pode ser menor que a Data Miníma!");
        } else {
            try {
                JasperReport relCompilado = JasperCompileManager.compileReport("src/br/edu/ifsp/rel/RelatorioCompra.jrxml");

                Map parametros = new HashMap();

                parametros.put("REPORT_CONNECTION", "src/br/edu/ifsp/rel/ItensCompraRelatorio.jrxml");
                parametros.put("dataMin", dateMinVenda.getDate());
                parametros.put("dataMax", dateMaxVenda.getDate());

                JasperPrint relPreenchido = JasperFillManager.fillReport(relCompilado, parametros, Conexao.abrir());

                JFrame tela = new JFrame("Relatório de Compras");
                tela.setSize(1080, 720);

                JRViewer painelRelatorio = new JRViewer(relPreenchido);

                tela.getContentPane().add(painelRelatorio);

                tela.setVisible(true);

            } catch (JRException ex) {
                Logger.getLogger(InterCompra.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Erro ao gerar Relatório de Compra");
            }
        }
    }//GEN-LAST:event_btnRelatorioComprasActionPerformed

    private void btnCancelarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarPedidoActionPerformed
        if (tableCompras.getSelectedRow() != -1) {
            if (tableCompras.getValueAt(tableCompras.getSelectedRow(), 4).equals("Entregue")) {
                JOptionPane.showMessageDialog(this, "Esse pedido já foi confirmado a sua entrega!");
            } else if (tableCompras.getValueAt(tableCompras.getSelectedRow(), 4).equals("Cancelado")) {
                JOptionPane.showMessageDialog(this, "Esse pedido foi Cancelado!");
            } else {
                String opt[] = {"Sim", "Não"};

                int op = JOptionPane.showOptionDialog(this, "Cancelar pedido de " + tableCompras.getValueAt(tableCompras.getSelectedRow(), 1) + "?",
                        "Cancelamento do pedido de Compra nº " + tableCompras.getValueAt(tableCompras.getSelectedRow(), 0),
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opt, opt[1]);

                if (op == JOptionPane.YES_OPTION) {
                    compraControl.alterarSituacaoCompra(Integer.parseInt(String.valueOf(tableCompras.getValueAt(tableCompras.getSelectedRow(), 0))), "Cancelado");

                    listarCompras();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma Compra da lista!");
        }
    }//GEN-LAST:event_btnCancelarPedidoActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        pesquisarPorFornecedor(txtPesquisa.getText());
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dateMinVenda.setDate(null);
        dateMaxVenda.setDate(null);
        txtPesquisa.setText("");
        listarCompras();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnConsultaVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaVendasActionPerformed
        SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd");

        if (dateMinVenda.getDate() == null || dateMaxVenda.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Campos de Data vazio!");
        } else if (dateMinVenda.getDate().compareTo(dateMaxVenda.getDate()) > 0) {
            JOptionPane.showMessageDialog(this, "A Data Máxima não pode ser menor que a Data Miníma para a consulta!");
        } else {
            String dateMin = form.format(dateMinVenda.getDate());
            String dateMax = form.format(dateMaxVenda.getDate());
            consultarTabelaCompras(dateMin, dateMax);
        }
    }//GEN-LAST:event_btnConsultaVendasActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduto;
    private javax.swing.JButton btnCancelarPedido;
    private javax.swing.JButton btnConsultaVendas;
    private javax.swing.JButton btnDarEntradaEstoque;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnRelatorioCompras;
    private javax.swing.JButton btnRemoveProduto;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cboxFornecedor;
    private javax.swing.JComboBox<String> cboxProduto;
    private com.toedter.calendar.JDateChooser dateMaxVenda;
    private com.toedter.calendar.JDateChooser dateMinVenda;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelEstoque;
    private javax.swing.JLabel labelEstoque1;
    private javax.swing.JLabel lblTotalCompra;
    private javax.swing.JTable tableCompras;
    private javax.swing.JTable tableItensCompra;
    private javax.swing.JTable tableProdutosCompra;
    private javax.swing.JTabbedPane tbpRegistroCompras;
    private javax.swing.JTextField txtBuscaFornecedor;
    private javax.swing.JTextField txtCodFornecedor;
    private javax.swing.JTextField txtCodProduto;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtQtdProduto;
    // End of variables declaration//GEN-END:variables

    private void listarFornecedores() {
        listaFornecedores = fornecedorControl.listar();

        cboxFornecedor.removeAllItems();

        cboxFornecedor.addItem("- Selecione o Fornecedor -");

        for (Fornecedor listaF : listaFornecedores) {
            cboxFornecedor.addItem(listaF.toString());
        }
    }

    private void listarProdutos() {
        listaProdutos = produtoControl.listar();

        cboxProduto.removeAllItems();

        cboxProduto.addItem("- Selecione o produto -");

        for (Produto listaP : listaProdutos) {
            cboxProduto.addItem(listaP.toString());
        }
    }

    private boolean verificarQuantidadeEstoque() {
        Double quantia = Double.parseDouble(txtQtdProduto.getText());

        return quantia >= 1;
    }

    private void addLinhaListaPCompra(DefaultTableModel modelo, double quantidade) {
        modelo.addRow(new Object[]{
            produto.getCodigo(),
            produto.getDescricao() + " " + produto.getModelo() + " " + produto.getMarca(),
            quantidade,
            produto.getPrecoreal(),
            quantidade * produto.getPrecoreal()
        });
    }

    private void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void somarValorTotalProdutoServico() {
        double soma = 0;
        double valor;
        int cont = tableProdutosCompra.getRowCount();

        for (int i = 0; i < cont; i++) {
            valor = (double) tableProdutosCompra.getValueAt(i, 4);
            soma = soma + valor;
        }

        String monetario = String.valueOf(String.format("%.2f", soma));
        String monetarioFormat = monetario.replace(" ", "").replace(".", ",");

        lblTotalCompra.setText("R$ " + monetarioFormat);
    }

    private void subtrairValorProdutoServico(int selectedRow) {
        DefaultTableModel modelo = (DefaultTableModel) tableProdutosCompra.getModel();
        String valorVenda = lblTotalCompra.getText().replace("R$", "").replace(" ", "").replace(",", ".");
        double subtracao = Double.parseDouble(valorVenda);

        subtracao = subtracao - (double) tableProdutosCompra.getValueAt(selectedRow, 4);

        modelo.removeRow(selectedRow);

        String monetario = String.valueOf(String.format("%.2f", subtracao));
        String monetarioFormat = monetario.replace(" ", "").replace(".", ",");
        lblTotalCompra.setText("R$ " + monetarioFormat);
    }

    public void adicionaritens(int codCompra) {
        listaItemCompra = new ArrayList<>();

        int cont = tableProdutosCompra.getRowCount();
        int codigoProduto = 0;

        for (int i = 0; i < cont; i++) {

            codigoProduto = Integer.parseInt(String.valueOf(tableProdutosCompra.getValueAt(i, 0)));
            itemCompra = new ItemCompra();
            produto = new Produto();

            itemCompra.setCodProduto(codigoProduto);
            itemCompra.setCodCompra(codCompra);
            itemCompra.setQuantidade(Double.parseDouble(String.valueOf(tableProdutosCompra.getValueAt(i, 2))));
            itemCompra.setSubtotal(Double.parseDouble(String.valueOf(tableProdutosCompra.getValueAt(i, 4))));

            //produto
//            produto.setCodigo(codigoProduto);
//            produto.setEstoque(produtoControl.buscarPorCodigo(codigoProduto).getEstoque() + Double.parseDouble(String.valueOf(tableProdutosCompra.getValueAt(i, 2))));
            listaItemCompra.add(itemCompra);
            listaProdutos.add(produto);
        }
        itemCompraControl.inserir(listaItemCompra);
    }

    public void listarCompras() {
        DefaultTableModel modelo = (DefaultTableModel) tableCompras.getModel();
        modelo.setNumRows(0);
        listaEntidadesCompra = compraControl.listar();

        int cont = listaEntidadesCompra.size();

        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaEntidadesCompra.get(i).getCompraObj().getCodigo(),
                listaEntidadesCompra.get(i).getFornecedorObj().getNomefantasia(),
                listaEntidadesCompra.get(i).getCompraObj().getData(),
                listaEntidadesCompra.get(i).getCompraObj().getTotal(),
                listaEntidadesCompra.get(i).getCompraObj().getSituacao()
            });
        }
        organizarJtableCompra();
    }

    private void organizarJtableCompra() {
        tableCompras.getColumnModel().getColumn(2).setCellRenderer(FormatRenderer.getDateRenderer());
        tableCompras.getColumnModel().getColumn(3).setCellRenderer(NumberRenderer.getCurrencyRenderer());
    }

    private void listarProdutosCompra() {
        DefaultTableModel modelo = (DefaultTableModel) tableItensCompra.getModel();
        modelo.setNumRows(0);

        String indice = String.valueOf(tableCompras.getValueAt(tableCompras.getSelectedRow(), 0));

        listaEntidadesItemCompra = itemCompraControl.listarItensCompra(indice);

        int cont = listaEntidadesItemCompra.size();
        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaEntidadesItemCompra.get(i).getProdutoObj().getCodigo(),
                listaEntidadesItemCompra.get(i).getProdutoObj().getDescricao(),
                listaEntidadesItemCompra.get(i).getItemCompraObj().getQuantidade(),
                listaEntidadesItemCompra.get(i).getProdutoObj().getPrecoreal(),
                listaEntidadesItemCompra.get(i).getItemCompraObj().getSubtotal()
            });
        }

        organizarJTableProdutoCompra();
    }

    private void organizarJTableProdutoCompra() {
        tableItensCompra.getColumnModel().getColumn(2).setCellRenderer(NumberRenderer.getNumberRenderer(FRAMEBITS));
        tableItensCompra.getColumnModel().getColumn(3).setCellRenderer(NumberRenderer.getCurrencyRenderer());
        tableItensCompra.getColumnModel().getColumn(4).setCellRenderer(NumberRenderer.getCurrencyRenderer());
    }

    private void pesquisarPorFornecedor(String text) {
        DefaultTableModel modelo = (DefaultTableModel) tableCompras.getModel();
        modelo.setNumRows(0);
        listaEntidadesCompra = compraControl.listarPorFornecedor(text);

        int cont = listaEntidadesCompra.size();

        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaEntidadesCompra.get(i).getCompraObj().getCodigo(),
                listaEntidadesCompra.get(i).getFornecedorObj().getNomefantasia(),
                listaEntidadesCompra.get(i).getCompraObj().getData(),
                listaEntidadesCompra.get(i).getCompraObj().getTotal(),
                listaEntidadesCompra.get(i).getCompraObj().getSituacao()
            });
        }
        organizarJtableCompra();
    }

    private void consultarTabelaCompras(String dateMin, String dateMax) {
        DefaultTableModel modelo = (DefaultTableModel) tableCompras.getModel();
        modelo.setNumRows(0);
        listaEntidadesCompra = compraControl.listarPorData(dateMin, dateMax);

        int cont = listaEntidadesCompra.size();

        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaEntidadesCompra.get(i).getCompraObj().getCodigo(),
                listaEntidadesCompra.get(i).getFornecedorObj().getNomefantasia(),
                listaEntidadesCompra.get(i).getCompraObj().getData(),
                listaEntidadesCompra.get(i).getCompraObj().getTotal(),
                listaEntidadesCompra.get(i).getCompraObj().getSituacao()
            });
        }
        organizarJtableCompra();
    }
}
